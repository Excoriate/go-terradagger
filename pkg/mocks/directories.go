// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/utils/directories.go
//
// Generated by this command:
//
//	mockgen -source pkg/utils/directories.go -destination mocks/utils/directories.go
//

// Package mock_utils is a generated GoMock package.
package mocks

import (
	"reflect"

	"go.uber.org/mock/gomock"
)

// MockDirUtilities is a mock of DirUtilities interface.
type MockDirUtilities struct {
	ctrl     *gomock.Controller
	recorder *MockDirUtilitiesMockRecorder
}

// MockDirUtilitiesMockRecorder is the mock recorder for MockDirUtilities.
type MockDirUtilitiesMockRecorder struct {
	mock *MockDirUtilities
}

// NewMockDirUtilities creates a new mock instance.
func NewMockDirUtilities(ctrl *gomock.Controller) *MockDirUtilities {
	mock := &MockDirUtilities{ctrl: ctrl}
	mock.recorder = &MockDirUtilitiesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirUtilities) EXPECT() *MockDirUtilitiesMockRecorder {
	return m.recorder
}

// DirExist mocks base method.
func (m *MockDirUtilities) DirExist(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirExist", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DirExist indicates an expected call of DirExist.
func (mr *MockDirUtilitiesMockRecorder) DirExist(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirExist", reflect.TypeOf((*MockDirUtilities)(nil).DirExist), path)
}

// DirExistAndHasContent mocks base method.
func (m *MockDirUtilities) DirExistAndHasContent(dirPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirExistAndHasContent", dirPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DirExistAndHasContent indicates an expected call of DirExistAndHasContent.
func (mr *MockDirUtilitiesMockRecorder) DirExistAndHasContent(dirPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirExistAndHasContent", reflect.TypeOf((*MockDirUtilities)(nil).DirExistAndHasContent), dirPath)
}

// GetCurrentDir mocks base method.
func (m *MockDirUtilities) GetCurrentDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentDir indicates an expected call of GetCurrentDir.
func (mr *MockDirUtilitiesMockRecorder) GetCurrentDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentDir", reflect.TypeOf((*MockDirUtilities)(nil).GetCurrentDir))
}

// GetHomeDir mocks base method.
func (m *MockDirUtilities) GetHomeDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHomeDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHomeDir indicates an expected call of GetHomeDir.
func (mr *MockDirUtilitiesMockRecorder) GetHomeDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHomeDir", reflect.TypeOf((*MockDirUtilities)(nil).GetHomeDir))
}

// IsValidDir mocks base method.
func (m *MockDirUtilities) IsValidDir(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidDir", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsValidDir indicates an expected call of IsValidDir.
func (mr *MockDirUtilitiesMockRecorder) IsValidDir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidDir", reflect.TypeOf((*MockDirUtilities)(nil).IsValidDir), path)
}
