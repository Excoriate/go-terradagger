---
version: '3'
env:
    ENV: '{{.ENV}}'

vars:
    MODULE: '{{default "root-module-1" .MODULE}}'
    VARS: '{{default "fixtures.tfvars" .VARS}}'
    TERRADAGGER_CLI_NAME: '{{default "terradagger-cli" .TERRADAGGER_CLI_NAME}}'
    TERRAFORM_TESTS_MODULES_DIR: '{{default "tests/terraform" .TERRAFORM_TESTS_MODULES_DIR}}'

dotenv: ['.env.{{.ENV}}.aws', '.env.{{.ENV}}.terraform', '.env.{{.ENV}}.terragrunt']

includes:
    common:
        taskfile: ./taskfiles/taskfile.common.yml
    precommit:
        taskfile: ./taskfiles/taskfile.precommit.yml
    tf:
        taskfile: ./taskfiles/Taskfile.terraform.yml

tasks:
    # ***********************
    # Common tasks
    # ***********************
    default:
        cmds:
            - task: common:default

    pc-init:
        desc: Initialize and install required hooks
        cmds:
            - task: precommit:hooks-init

    pc-run:
        desc: Run all the hooks described in the .pre-commit-config.yaml file
        cmds:
            - task: precommit:hooks-run
      # ****************************************************
      # Go Tasks
      # ****************************************************
    go-tidy:
        desc: Tidy go modules
        cmds:
            - go mod tidy
    go-fmt:
        desc: Run go fmt against code
        cmds:
            - go fmt -x ./...
    go-vet:
        desc: Run go vet against code
        cmds:
            - go vet ./...
    go-lint:
        desc: Run go lint against code
        cmds:
            - golangci-lint run -v -E gofmt --config .golangci.yml
    go-style:
        desc: Code style -> fmt,vet,lint
        deps: [go-fmt, go-vet, go-lint]
    go-test:
        desc: Run unit tests
        cmds:
            - echo "===========> Run unit tests"
            - go tests -race -v ./...
    cli-build:
        desc: Build the terradagger CLi
        dir: ./cli
        sources:
            - ./main.go
        generates:
            - ./{{.TERRADAGGER_CLI_NAME}}
        cmds:
            - if [ -f ./{{.TERRADAGGER_CLI_NAME}} ]; then rm ./{{.TERRADAGGER_CLI_NAME}}; fi
            - go build -o {{.TERRADAGGER_CLI_NAME}} ./main.go
    cli-run:
        desc: Run the terradagger CLi
        dir: ./cli
        deps: [cli-build]
        cmds:
            - ./{{.TERRADAGGER_CLI_NAME}} {{.CLI_ARGS}}
    cli-run-src:
        desc: Run the terradagger CLi from source
        dir: ./cli
        cmds:
            - go run ./main.go {{.CLI_ARGS}}
    go-ci:
        desc: Run all the tests and code checks
        cmds:
            - task: go-style
            - task: go-tidy
            - task: go-tests
            - task: go-build

    # ***********************
    # Terraform task (modules)
    # (These tasks are used to run terraform commands in the examples directory)
    # ***********************
    tf-init:
        desc: Initialize the terraform module
        cmds:
            - task: common:clean
            - task: tf:init
              vars: {TF_WORKING_DIR: '{{.TERRAFORM_TESTS_MODULES_DIR}}/{{.MODULE}}'}

    tf-plan:
        desc: In the terraform module, execute a terraform plan
        cmds:
            - task: common:clean
            - task: tf:init
              vars: {TF_WORKING_DIR: '{{.TERRAFORM_TESTS_MODULES_DIR}}/{{.MODULE}}'}
            - task: tf:plan
              vars: {TF_WORKING_DIR: '{{.TERRAFORM_TESTS_MODULES_DIR}}/{{.MODULE}}', TF_VARS_FILE: '{{.VARS}}'}

    tf-apply:
        desc: In the terraform module, execute a terraform apply
        cmds:
            - task: common:clean
            - task: tf:init
              vars: {TF_WORKING_DIR: '{{.TERRAFORM_TESTS_MODULES_DIR}}/{{.MODULE}}'}
            - task: tf:apply
              vars: {TF_WORKING_DIR: '{{.TERRAFORM_TESTS_MODULES_DIR}}/{{.MODULE}}', TF_VARS_FILE: '{{.VARS}}'}

    tf-destroy:
        desc: In the terraform module, execute a terraform destroy
        cmds:
            - task: common:clean
            - task: tf:init
              vars: {TF_WORKING_DIR: '{{.TERRAFORM_TESTS_MODULES_DIR}}/{{.MODULE}}'}
            - task: tf:destroy
              vars: {TF_WORKING_DIR: '{{.TERRAFORM_TESTS_MODULES_DIR}}/{{.MODULE}}', TF_VARS_FILE: '{{.VARS}}'}

    tf-ci:
        desc: Run CI tasks for the terraform modules as part of the 'tests' directory
        cmds:
            - task: common:clean
            - task: tf:init
              vars: {TF_WORKING_DIR: '{{.TERRAFORM_TESTS_MODULES_DIR}}/{{.MODULE}}'}
            - task: tf:validate
              vars: {TF_WORKING_DIR: '{{.TERRAFORM_TESTS_MODULES_DIR}}/{{.MODULE}}'}
            - task: tf:fmt-fix
              vars: {TF_WORKING_DIR: '{{.TERRAFORM_TESTS_MODULES_DIR}}/{{.MODULE}}'}
            - task: tf:lint
              vars: {TF_WORKING_DIR: '{{.TERRAFORM_TESTS_MODULES_DIR}}/{{.MODULE}}'}
            - task: tf:docs
              vars: {TF_WORKING_DIR: '{{.TERRAFORM_TESTS_MODULES_DIR}}/{{.MODULE}}'}
